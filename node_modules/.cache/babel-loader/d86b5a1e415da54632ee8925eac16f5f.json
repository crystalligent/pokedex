{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/crystalligence/Desktop/pokedex/src/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport mockData from \"./mockData\";\nimport { Typography } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"./constants\";\n\nconst Pokemon = props => {\n  _s();\n\n  const {\n    match\n  } = props;\n  const {\n    params\n  } = match;\n  const {\n    pokemonId\n  } = params;\n  const [pokemon, setPokemon] = useState(mockData[`${pokemonId}`]);\n\n  const generatePokemonJSX = () => {\n    const {\n      name,\n      id,\n      species,\n      height,\n      weight,\n      types,\n      sprites\n    } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const {\n      front_default\n    } = sprites;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h1\",\n        children: [`${id}.`, \" \", toFirstCharUppercase(name), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: front_default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: \"300px\",\n          height: \"300px\"\n        },\n        src: fullImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \" Pokemon Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Species: \", /*#__PURE__*/_jsxDEV(Link, {\n          href: species.url,\n          children: [\" \", species.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Height: \", height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Weight: \", weight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \" Types:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), types.map(typeInfo => {\n        const {\n          type\n        } = typeInfo;\n        const {\n          name\n        } = type;\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\" \", `${name}`]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 18\n        }, this);\n      })]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", generatePokemonJSX(), \" \"]\n  }, void 0, true);\n};\n\n_s(Pokemon, \"PljaoIZVO0xXWtrhUpn4dcZwVL8=\");\n\n_c = Pokemon;\nexport default Pokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/src/Pokemon.js"],"names":["React","useState","mockData","Typography","toFirstCharUppercase","Pokemon","props","match","params","pokemonId","pokemon","setPokemon","generatePokemonJSX","name","id","species","height","weight","types","sprites","fullImageUrl","front_default","width","url","map","typeInfo","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACIC,UADJ,QAEQ,mBAFR;AAIA,SAASC,oBAAT,QAAqC,aAArC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAaD,KAAnB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAgBD,MAAtB;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAACC,QAAQ,CAAE,GAAEO,SAAU,EAAd,CAAT,CAAtC;;AAEA,QAAMG,kBAAkB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,EAAR;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA,MAArB;AAA6BC,MAAAA,MAA7B;AAAqCC,MAAAA,KAArC;AAA4CC,MAAAA;AAA5C,QAAwDT,OAA9D;AACA,UAAMU,YAAY,GAAI,iDAAgDN,EAAG,MAAzE;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAoBF,OAA1B;AACA,wBACE;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAG,IAAtB;AAAA,mBACI,GAAEL,EAAG,GADT,OACcV,oBAAoB,CAACS,IAAD,CADlC,eAEE;AAAK,UAAA,GAAG,EAAEQ;AAAV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,OAAT;AAAkBN,UAAAA,MAAM,EAAE;AAA1B,SAAZ;AAAiD,QAAA,GAAG,EAAGI;AAAvD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,UAAD;AAAA,mBACG,WADH,eAEE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEL,OAAO,CAACQ,GAApB;AAAA,0BAA2BR,OAAO,CAACF,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAWE,QAAC,UAAD;AAAA,+BAAqBG,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE,QAAC,UAAD;AAAA,+BAAqBC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAaE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,EAcGC,KAAK,CAACM,GAAN,CAAWC,QAAD,IAAc;AACvB,cAAM;AAAEC,UAAAA;AAAF,YAAWD,QAAjB;AACA,cAAM;AAAEZ,UAAAA;AAAF,YAAWa,IAAjB;AACA,4BAAO,QAAC,UAAD;AAAA,0BAA0B,GAAEb,IAAK,EAAjC;AAAA,WAAiBA,IAAjB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAJA,CAdH;AAAA,oBADF;AAsBD,GA1BD;;AA2BA,sBAAO;AAAA,oBAAID,kBAAkB,EAAtB;AAAA,kBAAP;AAED,CAnCD;;GAAMP,O;;KAAAA,O;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport mockData from \"./mockData\";\nimport { \n    Typography\n } from \"@material-ui/core\";\n\nimport { toFirstCharUppercase } from \"./constants\";\n\nconst Pokemon = (props) => {\n  const { match } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n  const [pokemon, setPokemon] = useState(mockData[`${pokemonId}`])\n\n  const generatePokemonJSX = () => {\n    const { name, id, species, height, weight, types, sprites } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const { front_default } = sprites;\n    return (\n      <>\n        <Typography variant = \"h1\">\n          {`${id}.`} {toFirstCharUppercase(name)}\n          <img src={front_default} />\n        </Typography>\n        <img style={{ width: \"300px\", height: \"300px\" }} src={ fullImageUrl} />\n        <Typography variant=\"h3\"> Pokemon Info</Typography>\n        <Typography>\n          {\"Species: \"}\n          <Link href={species.url}> {species.name} </Link>\n        </Typography>\n        <Typography>Height: {height}</Typography>\n        <Typography>Weight: {weight}</Typography>\n        <Typography variant=\"h6\"> Types:</Typography>\n        {types.map((typeInfo) => {\n          const { type } = typeInfo;\n          const { name } = type;\n          return <Typography key={name}> {`${name}`}</Typography>;\n        })}\n      </>\n    );\n  }\n  return <> {generatePokemonJSX()} </>\n\n};\n\nexport default Pokemon"]},"metadata":{},"sourceType":"module"}