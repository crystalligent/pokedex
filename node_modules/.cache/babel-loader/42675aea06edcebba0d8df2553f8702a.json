{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_json_1 = __importDefault(require(\"../data/address.json\"));\n\nvar Address =\n/** @class */\nfunction () {\n  function Address(faker) {\n    this.faker = faker;\n  }\n\n  Address.prototype.city = function () {\n    var format = this.faker.Random.element(address_json_1.default.cities);\n    return this.parse(this.faker, format);\n  };\n\n  Address.prototype.streetName = function () {\n    var format = this.faker.Random.element(address_json_1.default.streetNames);\n    return this.parse(this.faker, format);\n  };\n\n  Address.prototype.streetAddress = function () {\n    var format = this.faker.Random.element(address_json_1.default.streetAddresses);\n    return this.parse(this.faker, format);\n  };\n\n  Address.prototype.secondaryAddress = function () {\n    var prefix = this.faker.Random.element(address_json_1.default.secondaryAddressPrefixes);\n    var format = prefix + \" ###\";\n    return this.parse(this.faker, format);\n  };\n\n  Address.prototype.buildingNumber = function () {\n    return '' + this.faker.Number.between(100, 99999);\n  };\n\n  Address.prototype.zipCode = function (stateAbbreviation) {\n    if (stateAbbreviation === void 0) {\n      stateAbbreviation = '';\n    }\n\n    var format = stateAbbreviation === '' ? this.faker.Random.element(address_json_1.default.postcodes) : address_json_1.default.postcodeByState[stateAbbreviation];\n    return this.parse(this.faker, format);\n  };\n\n  Address.prototype.zip = function (stateAbbreviation) {\n    if (stateAbbreviation === void 0) {\n      stateAbbreviation = '';\n    }\n\n    return this.zipCode(stateAbbreviation);\n  };\n\n  Address.prototype.postcode = function (stateAbbreviation) {\n    if (stateAbbreviation === void 0) {\n      stateAbbreviation = '';\n    }\n\n    return this.zipCode(stateAbbreviation);\n  };\n\n  Address.prototype.timeZone = function () {\n    return this.faker.Random.element(address_json_1.default.timeZones);\n  };\n\n  Address.prototype.streetSuffix = function () {\n    return this.faker.Random.element(address_json_1.default.streetSuffixes);\n  };\n\n  Address.prototype.citySuffix = function () {\n    return this.faker.Random.element(address_json_1.default.citySuffixes);\n  };\n\n  Address.prototype.cityPrefix = function () {\n    return this.faker.Random.element(address_json_1.default.cityPrefixes);\n  };\n\n  Address.prototype.state = function () {\n    return this.faker.Random.element(address_json_1.default.states);\n  };\n\n  Address.prototype.stateAbbr = function () {\n    return this.faker.Random.element(address_json_1.default.stateAbbreviations);\n  };\n\n  Address.prototype.country = function () {\n    return this.faker.Random.element(address_json_1.default.countries);\n  };\n\n  Address.prototype.countryCode = function () {\n    return this.faker.Random.element(address_json_1.default.countryCodes);\n  };\n\n  Address.prototype.latitude = function () {\n    return '' + (this.faker.Number.betweenF(0.0, 180.0) - 90);\n  };\n\n  Address.prototype.longitude = function () {\n    return '' + (this.faker.Number.betweenF(0.0, 360.0) - 180);\n  };\n\n  Address.prototype.parse = function (faker, format) {\n    var text = format.replace(/\\{(\\w+)\\}/g, function (m) {\n      return \"{Address.\" + m.substring(1);\n    }).replace(/#/, faker.Number.between(1, 9).toString());\n    return faker.Fake.f(text);\n  };\n\n  return Address;\n}();\n\nexports.Address = Address;","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/node_modules/fakergem/lib/faker/address.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","address_json_1","require","Address","faker","prototype","city","format","Random","element","default","cities","parse","streetName","streetNames","streetAddress","streetAddresses","secondaryAddress","prefix","secondaryAddressPrefixes","buildingNumber","Number","between","zipCode","stateAbbreviation","postcodes","postcodeByState","zip","postcode","timeZone","timeZones","streetSuffix","streetSuffixes","citySuffix","citySuffixes","cityPrefix","cityPrefixes","state","states","stateAbbr","stateAbbreviations","country","countries","countryCode","countryCodes","latitude","betweenF","longitude","text","replace","m","substring","toString","Fake","f"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar address_json_1 = __importDefault(require(\"../data/address.json\"));\nvar Address = /** @class */ (function () {\n    function Address(faker) {\n        this.faker = faker;\n    }\n    Address.prototype.city = function () {\n        var format = this.faker.Random.element(address_json_1.default.cities);\n        return this.parse(this.faker, format);\n    };\n    Address.prototype.streetName = function () {\n        var format = this.faker.Random.element(address_json_1.default.streetNames);\n        return this.parse(this.faker, format);\n    };\n    Address.prototype.streetAddress = function () {\n        var format = this.faker.Random.element(address_json_1.default.streetAddresses);\n        return this.parse(this.faker, format);\n    };\n    Address.prototype.secondaryAddress = function () {\n        var prefix = this.faker.Random.element(address_json_1.default.secondaryAddressPrefixes);\n        var format = prefix + \" ###\";\n        return this.parse(this.faker, format);\n    };\n    Address.prototype.buildingNumber = function () {\n        return '' + this.faker.Number.between(100, 99999);\n    };\n    Address.prototype.zipCode = function (stateAbbreviation) {\n        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }\n        var format = stateAbbreviation === ''\n            ? this.faker.Random.element(address_json_1.default.postcodes)\n            : address_json_1.default.postcodeByState[stateAbbreviation];\n        return this.parse(this.faker, format);\n    };\n    Address.prototype.zip = function (stateAbbreviation) {\n        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }\n        return this.zipCode(stateAbbreviation);\n    };\n    Address.prototype.postcode = function (stateAbbreviation) {\n        if (stateAbbreviation === void 0) { stateAbbreviation = ''; }\n        return this.zipCode(stateAbbreviation);\n    };\n    Address.prototype.timeZone = function () {\n        return this.faker.Random.element(address_json_1.default.timeZones);\n    };\n    Address.prototype.streetSuffix = function () {\n        return this.faker.Random.element(address_json_1.default.streetSuffixes);\n    };\n    Address.prototype.citySuffix = function () {\n        return this.faker.Random.element(address_json_1.default.citySuffixes);\n    };\n    Address.prototype.cityPrefix = function () {\n        return this.faker.Random.element(address_json_1.default.cityPrefixes);\n    };\n    Address.prototype.state = function () {\n        return this.faker.Random.element(address_json_1.default.states);\n    };\n    Address.prototype.stateAbbr = function () {\n        return this.faker.Random.element(address_json_1.default.stateAbbreviations);\n    };\n    Address.prototype.country = function () {\n        return this.faker.Random.element(address_json_1.default.countries);\n    };\n    Address.prototype.countryCode = function () {\n        return this.faker.Random.element(address_json_1.default.countryCodes);\n    };\n    Address.prototype.latitude = function () {\n        return '' + (this.faker.Number.betweenF(0.0, 180.0) - 90);\n    };\n    Address.prototype.longitude = function () {\n        return '' + (this.faker.Number.betweenF(0.0, 360.0) - 180);\n    };\n    Address.prototype.parse = function (faker, format) {\n        var text = format\n            .replace(/\\{(\\w+)\\}/g, function (m) { return \"{Address.\" + m.substring(1); })\n            .replace(/#/, faker.Number.between(1, 9).toString());\n        return faker.Fake.f(text);\n    };\n    return Address;\n}());\nexports.Address = Address;\n"]},"metadata":{},"sourceType":"script"}