{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/crystalligence/Desktop/pokedex/src/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, CircularProgress, Button } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport { red } from '@material-ui/core/colors';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 700,\n    margin: \"auto\",\n    backgroundColor: \"#c8f3e7a3\"\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  avatar: {\n    backgroundColor: red[500]\n  },\n  backButton: {\n    alignItems: \"right\"\n  }\n}));\n\nconst Pokemon = props => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    history,\n    match\n  } = props;\n  const {\n    params\n  } = match;\n  const {\n    pokemonId\n  } = params;\n  const [pokemon, setPokemon] = useState(undefined);\n  useEffect(() => {\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`).then(function (response) {\n      const {\n        data\n      } = response;\n      setPokemon(data);\n    }).catch(function (error) {\n      setPokemon(false);\n    });\n  }, [pokemonId]);\n\n  const generatePokemonJSX = () => {\n    const {\n      name,\n      id,\n      species,\n      height,\n      weight,\n      types,\n      sprites\n    } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const {\n      front_default\n    } = sprites;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h1\",\n        children: [`${id}.`, \" \", toFirstCharUppercase(name), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: front_default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n        style: {\n          width: \"300px\",\n          height: \"300px\"\n        },\n        image: fullImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \" Pokemon Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Species: \", species.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Height: \", height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Weight: \", weight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \" Types:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), types.map(typeInfo => {\n        const {\n          type\n        } = typeInfo;\n        const {\n          name\n        } = type;\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\" \", `${name}`]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n            \"aria-label\": \"recipe\",\n            className: classes.avatar,\n            children: name.charAt(0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this),\n          title: toFirstCharUppercase(name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n          className: classes.media,\n          image: fullImageUrl,\n          style: {\n            height: \"300px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \" Pokemon Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Species: \", species.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Height: \", height]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Weight: \", weight]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \" Types:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), types.map(typeInfo => {\n            const {\n              type\n            } = typeInfo;\n            const {\n              name\n            } = type;\n            return /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", `${name}`]\n            }, name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 20\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [pokemon === undefined && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 31\n    }, this), pokemon !== undefined && pokemon && generatePokemonJSX(), pokemon === false && /*#__PURE__*/_jsxDEV(Typography, {\n      children: \" Pokemon not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 27\n    }, this), pokemon !== undefined && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      className: classes.backButton,\n      onClick: () => history.push(\"/\"),\n      children: \"back to pokedex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pokemon, \"Nrii/59e6u1dVF3WO2oy4oRqmO4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Pokemon;\nexport default Pokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/src/Pokemon.js"],"names":["React","useState","useEffect","makeStyles","Typography","CircularProgress","Button","toFirstCharUppercase","axios","Card","CardHeader","CardMedia","CardContent","Avatar","red","useStyles","theme","root","maxWidth","margin","backgroundColor","media","height","paddingTop","avatar","backButton","alignItems","Pokemon","props","classes","history","match","params","pokemonId","pokemon","setPokemon","undefined","get","then","response","data","catch","error","generatePokemonJSX","name","id","species","weight","types","sprites","fullImageUrl","front_default","width","map","typeInfo","type","charAt","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, CircularProgress, Button } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\n\n\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport { red } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      maxWidth: 700,\n      margin: \"auto\",\n      backgroundColor: \"#c8f3e7a3\",\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n    backButton: {\n      alignItems: \"right\",\n    }\n}));\n\nconst Pokemon = (props) => {\n  const classes = useStyles();\n  const { history, match } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n  const [pokemon, setPokemon] = useState(undefined)\n\n  useEffect(() => {\n    axios \n    .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\n    .then(function (response) {\n      const { data } = response;\n      setPokemon(data);\n    })\n    .catch(function (error) {\n      setPokemon(false);\n    });\n  }, [pokemonId]);\n\n  const generatePokemonJSX = () => {\n    const { name, id, species, height, weight, types, sprites } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const { front_default } = sprites;\n\n    return (\n      <>\n        <Typography variant = \"h1\">\n        {`${id}.`} {toFirstCharUppercase(name)}\n        <img src={front_default} />\n        </Typography>\n        <CardMedia \n            style={{ width: \"300px\", height: \"300px\" }} \n            image={ fullImageUrl} \n            />\n        <Typography variant=\"h3\"> Pokemon Info</Typography>\n        <Typography>Species: {species.name}</Typography>\n        <Typography>Height: {height}</Typography>\n        <Typography>Weight: {weight}</Typography>\n        <Typography variant=\"h6\"> Types:</Typography>\n        {types.map((typeInfo) => {\n        const { type } = typeInfo;\n        const { name } = type;\n        return <Typography key={name}> {`${name}`}</Typography>;\n        })}\n        \n        <Card className={classes.root}>\n        <CardHeader\n            avatar={\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                { name.charAt(0) }\n            </Avatar>\n            }\n            title = {toFirstCharUppercase(name)}\n        />\n        <CardMedia\n            className={classes.media}\n            image={ fullImageUrl} \n            style= {{ height: \"300px\" }}\n        />\n        <CardContent>\n            <Typography variant=\"h6\"> Pokemon Info</Typography>\n            <Typography>Species: {species.name}</Typography>\n            <Typography>Height: {height}</Typography>\n            <Typography>Weight: {weight}</Typography>\n            <Typography variant=\"h6\"> Types:</Typography>\n            {types.map((typeInfo) => {\n            const { type } = typeInfo;\n            const { name } = type;\n            return <Typography key={name}> {`${name}`}</Typography>;\n            })}\n        </CardContent>\n        </Card>\n      </>\n    );\n  }\n  return ( <> \n    {pokemon === undefined && <CircularProgress />}\n    {pokemon !== undefined && pokemon && generatePokemonJSX()}\n    {pokemon === false && <Typography> Pokemon not found</Typography>}\n    {pokemon !== undefined && (\n      <Button variant = \"contained\" \n       className = { classes.backButton}\n       onClick={() => history.push(\"/\")}>\n       back to pokedex\n      </Button>\n    )}\n  </>);\n\n};\n\nexport default Pokemon"]},"metadata":{},"sourceType":"module"}