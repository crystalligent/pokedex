{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/crystalligence/Desktop/pokedex/src/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Typography, CircularProgress, Button } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport tileData from './tileData';\n\nconst Pokemon = props => {\n  _s();\n\n  const {\n    history,\n    match\n  } = props;\n  const {\n    params\n  } = match;\n  const {\n    pokemonId\n  } = params;\n  const [pokemon, setPokemon] = useState(undefined);\n  const useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper\n    },\n    gridList: {\n      width: 500,\n      height: 450\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)'\n    }\n  }));\n  useEffect(() => {\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`).then(function (response) {\n      const {\n        data\n      } = response;\n      setPokemon(data);\n    }).catch(function (error) {\n      setPokemon(false);\n    });\n  }, [pokemonId]);\n\n  const generatePokemonJSX = () => {\n    const {\n      name,\n      id,\n      species,\n      height,\n      weight,\n      types,\n      sprites\n    } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const {\n      front_default\n    } = sprites;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h1\",\n        children: [`${id}.`, \" \", toFirstCharUppercase(name), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: front_default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: \"300px\",\n          height: \"300px\"\n        },\n        src: fullImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \" Pokemon Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Species: \", species.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Height: \", height]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Weight: \", weight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \" Types:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), types.map(typeInfo => {\n        const {\n          type\n        } = typeInfo;\n        const {\n          name\n        } = type;\n        return /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\" \", `${name}`]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(GridList, {\n          cellHeight: 180,\n          className: classes.gridList,\n          children: [/*#__PURE__*/_jsxDEV(GridListTile, {\n            cols: 2,\n            style: {\n              height: 'auto'\n            },\n            children: /*#__PURE__*/_jsxDEV(ListSubheader, {\n              component: \"div\",\n              children: \"December\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)\n          }, \"Subheader\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), tileData.map(tile => /*#__PURE__*/_jsxDEV(GridListTile, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: tile.img,\n              alt: tile.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n              title: tile.title,\n              subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"by: \", tile.author]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 31\n              }, this),\n              actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": `info about ${tile.title}`,\n                className: classes.icon,\n                children: /*#__PURE__*/_jsxDEV(InfoIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }, this)]\n          }, tile.img, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [pokemon === undefined && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 31\n    }, this), pokemon !== undefined && pokemon && generatePokemonJSX(), pokemon === false && /*#__PURE__*/_jsxDEV(Typography, {\n      children: \" Pokemon not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 27\n    }, this), pokemon !== undefined && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => history.push(\"/\"),\n      children: \"back to pokedex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pokemon, \"5RlIBupmaXeLRXK3uCwYnX00xBs=\");\n\n_c = Pokemon;\nexport default Pokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/src/Pokemon.js"],"names":["React","useState","useEffect","Typography","CircularProgress","Button","toFirstCharUppercase","axios","makeStyles","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","InfoIcon","tileData","Pokemon","props","history","match","params","pokemonId","pokemon","setPokemon","undefined","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","get","then","response","data","catch","error","generatePokemonJSX","name","id","species","weight","types","sprites","fullImageUrl","front_default","map","typeInfo","type","classes","tile","img","title","author","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, CircularProgress, Button } from \"@material-ui/core\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport tileData from './tileData';\n\n\n\nconst Pokemon = (props) => {\n  const { history, match } = props;\n  const { params } = match;\n  const { pokemonId } = params;\n  const [pokemon, setPokemon] = useState(undefined)\n\nconst useStyles = makeStyles((theme) => ({\nroot: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n},\ngridList: {\n    width: 500,\n    height: 450,\n},\nicon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n},\n}));\n\n  useEffect(() => {\n    axios \n    .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\n    .then(function (response) {\n      const { data } = response;\n      setPokemon(data);\n    })\n    .catch(function (error) {\n      setPokemon(false);\n    });\n  }, [pokemonId]);\n\n  const generatePokemonJSX = () => {\n    const { name, id, species, height, weight, types, sprites } = pokemon;\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const { front_default } = sprites;\n    return (\n      <>\n        <Typography variant = \"h1\">\n          {`${id}.`} {toFirstCharUppercase(name)}\n          <img src={front_default} />\n        </Typography>\n        <img style={{ width: \"300px\", height: \"300px\" }} src={ fullImageUrl} />\n        <Typography variant=\"h3\"> Pokemon Info</Typography>\n        <Typography>Species: {species.name}</Typography>\n        <Typography>Height: {height}</Typography>\n        <Typography>Weight: {weight}</Typography>\n        <Typography variant=\"h6\"> Types:</Typography>\n        {types.map((typeInfo) => {\n          const { type } = typeInfo;\n          const { name } = type;\n          return <Typography key={name}> {`${name}`}</Typography>;\n        })}\n\n        <div className={classes.root}>\n            <GridList cellHeight={180} className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n                <ListSubheader component=\"div\">December</ListSubheader>\n                </GridListTile>\n                {tileData.map((tile) => (\n                <GridListTile key={tile.img}>\n                    <img src={tile.img} alt={tile.title} />\n                    <GridListTileBar\n                    title={tile.title}\n                    subtitle={<span>by: {tile.author}</span>}\n                    actionIcon={\n                        <IconButton aria-label={`info about ${tile.title}`} className={classes.icon}>\n                        <InfoIcon />\n                        </IconButton>\n                    }\n                    />\n                </GridListTile>\n                ))}\n            </GridList>\n        </div>\n      </>\n    );\n  }\n  return ( <> \n    {pokemon === undefined && <CircularProgress />}\n    {pokemon !== undefined && pokemon && generatePokemonJSX()}\n    {pokemon === false && <Typography> Pokemon not found</Typography>}\n    {pokemon !== undefined && (\n      <Button variant = \"contained\" onClick={() => history.push(\"/\")}>\n       back to pokedex\n      </Button>\n    )}\n  </>);\n\n};\n\nexport default Pokemon"]},"metadata":{},"sourceType":"module"}