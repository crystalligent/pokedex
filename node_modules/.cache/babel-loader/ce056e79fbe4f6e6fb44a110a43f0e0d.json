{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar coffee_json_1 = __importDefault(require(\"../data/coffee.json\"));\n\nvar Coffee =\n/** @class */\nfunction () {\n  function Coffee(faker) {\n    this.faker = faker;\n  }\n\n  Coffee.prototype.blendName = function () {\n    var blendName = this.faker.Random.element(coffee_json_1.default.blendNames);\n    return this.parse(blendName);\n  };\n\n  Coffee.prototype.origin = function () {\n    var country = this.faker.Random.element(coffee_json_1.default.countries);\n    var key = country.replace(/\\s/, '_').toLowerCase();\n    var regions = coffee_json_1.default.regions;\n    var region = this.faker.Random.element(regions[key]);\n    return region + \", \" + country;\n  };\n\n  Coffee.prototype.variety = function () {\n    return this.faker.Random.element(coffee_json_1.default.varieties);\n  };\n\n  Coffee.prototype.notes = function () {\n    var notes = this.faker.Random.element(coffee_json_1.default.notes);\n    return this.parse(notes);\n  };\n\n  Coffee.prototype.parse = function (format) {\n    return format.replace(/\\{intensifier\\}/g, this.faker.Random.element(coffee_json_1.default.intensifiers)).replace(/\\{body\\}/g, this.faker.Random.element(coffee_json_1.default.bodies)).replace(/\\{descriptor\\}/g, this.faker.Random.element(coffee_json_1.default.descriptors)).replace(/\\{name1\\}/g, this.faker.Random.element(coffee_json_1.default.name1)).replace(/\\{name2\\}/g, this.faker.Random.element(coffee_json_1.default.name2));\n  };\n\n  return Coffee;\n}();\n\nexports.Coffee = Coffee;","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/node_modules/fakergem/lib/faker/coffee.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","coffee_json_1","require","Coffee","faker","prototype","blendName","Random","element","default","blendNames","parse","origin","country","countries","key","replace","toLowerCase","regions","region","variety","varieties","notes","format","intensifiers","bodies","descriptors","name1","name2"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar coffee_json_1 = __importDefault(require(\"../data/coffee.json\"));\nvar Coffee = /** @class */ (function () {\n    function Coffee(faker) {\n        this.faker = faker;\n    }\n    Coffee.prototype.blendName = function () {\n        var blendName = this.faker.Random.element(coffee_json_1.default.blendNames);\n        return this.parse(blendName);\n    };\n    Coffee.prototype.origin = function () {\n        var country = this.faker.Random.element(coffee_json_1.default.countries);\n        var key = country.replace(/\\s/, '_').toLowerCase();\n        var regions = coffee_json_1.default.regions;\n        var region = this.faker.Random.element(regions[key]);\n        return region + \", \" + country;\n    };\n    Coffee.prototype.variety = function () {\n        return this.faker.Random.element(coffee_json_1.default.varieties);\n    };\n    Coffee.prototype.notes = function () {\n        var notes = this.faker.Random.element(coffee_json_1.default.notes);\n        return this.parse(notes);\n    };\n    Coffee.prototype.parse = function (format) {\n        return format\n            .replace(/\\{intensifier\\}/g, this.faker.Random.element(coffee_json_1.default.intensifiers))\n            .replace(/\\{body\\}/g, this.faker.Random.element(coffee_json_1.default.bodies))\n            .replace(/\\{descriptor\\}/g, this.faker.Random.element(coffee_json_1.default.descriptors))\n            .replace(/\\{name1\\}/g, this.faker.Random.element(coffee_json_1.default.name1))\n            .replace(/\\{name2\\}/g, this.faker.Random.element(coffee_json_1.default.name2));\n    };\n    return Coffee;\n}());\nexports.Coffee = Coffee;\n"]},"metadata":{},"sourceType":"script"}