{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Placeholdit =\n/** @class */\nfunction () {\n  function Placeholdit(faker) {\n    this.SUPPORTED_FORMATS = ['png', 'jpg', 'gif', 'jpeg'];\n    this.faker = faker;\n  }\n\n  Placeholdit.prototype.image = function (size, format, backgroundColor, textColor, text) {\n    if (size === void 0) {\n      size = '300x300';\n    }\n\n    if (format === void 0) {\n      format = 'png';\n    }\n\n    if (backgroundColor === void 0) {\n      backgroundColor = null;\n    }\n\n    if (textColor === void 0) {\n      textColor = null;\n    }\n\n    if (text === void 0) {\n      text = null;\n    }\n\n    if (!this.isValidSize(size)) {\n      throw new Error('Size should be specified in format 300x300');\n    }\n\n    if (!this.isSupportedFormat(format)) {\n      throw new Error(\"Supported formats are \" + this.SUPPORTED_FORMATS.join(', '));\n    }\n\n    if (!this.isValidColorValue(backgroundColor)) {\n      throw new Error(\"backgroundColor must be a hex value without '#'\");\n    }\n\n    if (!this.isValidColorValue(textColor)) {\n      throw new Error(\"textColor must be a hex value without '#'\");\n    }\n\n    var url = \"https://placehold.it/\" + size + \".\" + format;\n\n    if (backgroundColor) {\n      url += \"/\" + backgroundColor;\n    }\n\n    if (textColor) {\n      url += \"/\" + textColor;\n    }\n\n    if (text) {\n      url += \"?text=\" + text;\n    }\n\n    return url;\n  };\n\n  Placeholdit.prototype.isValidSize = function (size) {\n    return /^\\d+x\\d+$/.test(size);\n  };\n\n  Placeholdit.prototype.isSupportedFormat = function (format) {\n    return this.SUPPORTED_FORMATS.indexOf(format) >= 0;\n  };\n\n  Placeholdit.prototype.isValidColorValue = function (color) {\n    if (color) {\n      return new RegExp(/(?:^[0-9a-f]{3}$)|(?:^[0-9a-f]{6}$)/.source, 'i').test(color);\n    }\n\n    return true;\n  };\n\n  return Placeholdit;\n}();\n\nexports.Placeholdit = Placeholdit;","map":{"version":3,"sources":["/Users/crystalligence/Desktop/pokedex/node_modules/fakergem/lib/faker/placeholdit.js"],"names":["Object","defineProperty","exports","value","Placeholdit","faker","SUPPORTED_FORMATS","prototype","image","size","format","backgroundColor","textColor","text","isValidSize","Error","isSupportedFormat","join","isValidColorValue","url","test","indexOf","color","RegExp","source"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;AACzC,WAASA,WAAT,CAAqBC,KAArB,EAA4B;AACxB,SAAKC,iBAAL,GAAyB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,MAAtB,CAAzB;AACA,SAAKD,KAAL,GAAaA,KAAb;AACH;;AACDD,EAAAA,WAAW,CAACG,SAAZ,CAAsBC,KAAtB,GAA8B,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,eAAxB,EAAyCC,SAAzC,EAAoDC,IAApD,EAA0D;AACpF,QAAIJ,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,SAAP;AAAmB;;AAC1C,QAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,KAAT;AAAiB;;AAC1C,QAAIC,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,MAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC3D,QAAIC,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,MAAAA,SAAS,GAAG,IAAZ;AAAmB;;AAC/C,QAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,MAAAA,IAAI,GAAG,IAAP;AAAc;;AACrC,QAAI,CAAC,KAAKC,WAAL,CAAiBL,IAAjB,CAAL,EAA6B;AACzB,YAAM,IAAIM,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,QAAI,CAAC,KAAKC,iBAAL,CAAuBN,MAAvB,CAAL,EAAqC;AACjC,YAAM,IAAIK,KAAJ,CAAU,2BAA2B,KAAKT,iBAAL,CAAuBW,IAAvB,CAA4B,IAA5B,CAArC,CAAN;AACH;;AACD,QAAI,CAAC,KAAKC,iBAAL,CAAuBP,eAAvB,CAAL,EAA8C;AAC1C,YAAM,IAAII,KAAJ,CAAU,iDAAV,CAAN;AACH;;AACD,QAAI,CAAC,KAAKG,iBAAL,CAAuBN,SAAvB,CAAL,EAAwC;AACpC,YAAM,IAAIG,KAAJ,CAAU,2CAAV,CAAN;AACH;;AACD,QAAII,GAAG,GAAG,0BAA0BV,IAA1B,GAAiC,GAAjC,GAAuCC,MAAjD;;AACA,QAAIC,eAAJ,EAAqB;AACjBQ,MAAAA,GAAG,IAAI,MAAMR,eAAb;AACH;;AACD,QAAIC,SAAJ,EAAe;AACXO,MAAAA,GAAG,IAAI,MAAMP,SAAb;AACH;;AACD,QAAIC,IAAJ,EAAU;AACNM,MAAAA,GAAG,IAAI,WAAWN,IAAlB;AACH;;AACD,WAAOM,GAAP;AACH,GA7BD;;AA8BAf,EAAAA,WAAW,CAACG,SAAZ,CAAsBO,WAAtB,GAAoC,UAAUL,IAAV,EAAgB;AAChD,WAAO,YAAYW,IAAZ,CAAiBX,IAAjB,CAAP;AACH,GAFD;;AAGAL,EAAAA,WAAW,CAACG,SAAZ,CAAsBS,iBAAtB,GAA0C,UAAUN,MAAV,EAAkB;AACxD,WAAO,KAAKJ,iBAAL,CAAuBe,OAAvB,CAA+BX,MAA/B,KAA0C,CAAjD;AACH,GAFD;;AAGAN,EAAAA,WAAW,CAACG,SAAZ,CAAsBW,iBAAtB,GAA0C,UAAUI,KAAV,EAAiB;AACvD,QAAIA,KAAJ,EAAW;AACP,aAAO,IAAIC,MAAJ,CAAW,sCAAsCC,MAAjD,EAAyD,GAAzD,EAA8DJ,IAA9D,CAAmEE,KAAnE,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GALD;;AAMA,SAAOlB,WAAP;AACH,CAhDgC,EAAjC;;AAiDAF,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Placeholdit = /** @class */ (function () {\n    function Placeholdit(faker) {\n        this.SUPPORTED_FORMATS = ['png', 'jpg', 'gif', 'jpeg'];\n        this.faker = faker;\n    }\n    Placeholdit.prototype.image = function (size, format, backgroundColor, textColor, text) {\n        if (size === void 0) { size = '300x300'; }\n        if (format === void 0) { format = 'png'; }\n        if (backgroundColor === void 0) { backgroundColor = null; }\n        if (textColor === void 0) { textColor = null; }\n        if (text === void 0) { text = null; }\n        if (!this.isValidSize(size)) {\n            throw new Error('Size should be specified in format 300x300');\n        }\n        if (!this.isSupportedFormat(format)) {\n            throw new Error(\"Supported formats are \" + this.SUPPORTED_FORMATS.join(', '));\n        }\n        if (!this.isValidColorValue(backgroundColor)) {\n            throw new Error(\"backgroundColor must be a hex value without '#'\");\n        }\n        if (!this.isValidColorValue(textColor)) {\n            throw new Error(\"textColor must be a hex value without '#'\");\n        }\n        var url = \"https://placehold.it/\" + size + \".\" + format;\n        if (backgroundColor) {\n            url += \"/\" + backgroundColor;\n        }\n        if (textColor) {\n            url += \"/\" + textColor;\n        }\n        if (text) {\n            url += \"?text=\" + text;\n        }\n        return url;\n    };\n    Placeholdit.prototype.isValidSize = function (size) {\n        return /^\\d+x\\d+$/.test(size);\n    };\n    Placeholdit.prototype.isSupportedFormat = function (format) {\n        return this.SUPPORTED_FORMATS.indexOf(format) >= 0;\n    };\n    Placeholdit.prototype.isValidColorValue = function (color) {\n        if (color) {\n            return new RegExp(/(?:^[0-9a-f]{3}$)|(?:^[0-9a-f]{6}$)/.source, 'i').test(color);\n        }\n        return true;\n    };\n    return Placeholdit;\n}());\nexports.Placeholdit = Placeholdit;\n"]},"metadata":{},"sourceType":"script"}